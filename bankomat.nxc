/*
Check after each rund if funds remaining and possibly adjust buttons accordingly
start money: 10 each
wenn struct array nicht funktioniert, 2d array nehmen
INPUTS:
1 pin feld
2 
3 kartenleser start 
4 lichtsensor daten
OUTPUTS:
a motor 
b
c

*/

int twenties=10;
int fifties=10;
int hundreds=10;
int pinno=0000;
int cardno=00;
int amount;

byte pressedButton;
int selectButton;  

// taken from NXTmenu.nxc
//is it necessary to pass by reference here?
void waitButton() {                         
byte wbIndex=BTNRIGHT;                      
while (wbIndex <= BTNCENTER)   {                         
        if (ButtonPressed(wbIndex,false) != 0)           
                break;                                   
                wbIndex++;                               
        if (wbIndex > BTNCENTER)                         
                    wbIndex = BTNRIGHT;                   
}                                                         
until(!ButtonPressed(wbIndex,FALSE));                     
pressedButton = wbIndex;                                  
}

void giveHundred(int number) {
//sensor move!
}

void giveFifty(int number) {
//sensor move!
}

void giveTwenty(int number) {
//sensor move!
}

void distribute(int amount,int &twenties,int &fifties,int &hundreds) {
int a,b,c;
//unnecessary here? does previous FN break correctly?
if (amount > ( (twenties * 20) + (fifties * 50) + (hundreds * 100))) {
	TextOut(0,LCD_LINE1,"Sorry, this machine");
	TextOut(0,LCD_LINE2,"  is out of funds.");
} else {

	//checkt nicht den fall was passiert wenn nur ein 50 und dann 50 weiter
	//kÃ¶nnen nicht mit 20ern ausgegeben werden
	a=amount / hundreds;
	giveHundred(a);
	amount-= a * hundreds;
	b=amount / fifties;
	giveFifty(b);
	amount-= b * fifties;
	c=amount / twenties;
	giveTwenty(c);

	if (amount>0) {
		TextOut(0,LCD_LINE1,"CANNOT HAPPEN");
		PlayTone(440,1000); 
	}
	else {
	//not how you do return codes?!
	//return(0);
	}
	}
}

void waiting(int &cardno) {
int val,c1,c2,c3,c4,touch;
string s1,s2,s3,s4,sum;
SetSensor(S4,SENSOR_LIGHT);
SetSensor(S3,SENSOR_TOUCH);
touch=Sensor(S3);

until (touch==TRUE) {
TextOut(0,LCD_LINE2,"Please insert");
TextOut(0,LCD_LINE3,"your card");
Wait(400);
touch=Sensor(S3);
}

//TODO: Remove NumOut when cards work
RotateMotor(OUT_ABC,-40,90);
c1=Sensor(S4);
val=Sensor(S4);
NumOut(0,LCD_LINE1,val);
Wait(500);
RotateMotor(OUT_ABC,-40,30);
c2=Sensor(S4);
val=Sensor(S4);
NumOut(0,LCD_LINE1,val);
Wait(500);
RotateMotor(OUT_ABC,-40,30);
c3=Sensor(S4);
val=Sensor(S4);
NumOut(0,LCD_LINE1,val);
Wait(500);
RotateMotor(OUT_ABC,-40,30);
c4=Sensor(S4);
val=Sensor(S4);
NumOut(0,LCD_LINE1,val);
Off(OUT_ABC);
Wait(1500);
RotateMotor(OUT_ABC,70,720);
Wait(1500);
Off(OUT_ABC);
c1 = 2 * 2 * 2 * s1;
c2 = 2 * 2 * s1;
c3 = 2 * s1;
s1 = NumToStr(c1);
s2 = NumToStr(c2);
s3 = NumToStr(c3);
s4 = NumToStr(c4);
sum = StrCat(s1,s2,s3,s4);
cardno=StrToNum(sum);
}

string requestFunds(int account,int pin,int amount) {
string actemp=NumToStr(account);
string commandstring;
if (StrLen(actemp)==1) {
commandstring="0";
commandstring+=actemp;
} else {
commandstring=actemp;
}

commandstring+="X";
commandstring+=NumToStr(pin);
commandstring+="X";

if (amount<100) {
commandstring+="0";
}
if (amount<1000) {
commandstring+="0";
}
commandstring+=NumToStr(amount);

//check btdevicename==bank if possible, if creatable
//SendRemoteString(connection,queue,commandstring);

//TODO:NOT FUCKING WORKING
//still needs to make network request and wait for response, look in queue
string tempeh="ack";
return tempeh;

}

void selectAmount(int &amount) {
int x2;
SetSensorMode(1, IN_MODE_RAW);
SetSensorType(1, IN_TYPE_SWITCH);

amount=100;
TextOut(0,LCD_LINE2,"Withdraw CHF:");
NumOut(0,LCD_LINE3,amount);
x2 =Sensor(S1);
while ((x2 < 30 && x2 > 34) || (x2 < 19 && x2 > 23)) {
    if (x2 > 49 && x2 < 54) {
    amount+=20;    
    NumOut(0,LCD_LINE3,amount);
    } else if (x2 >= 6 && x2 < 11) {
    amount-=20;    
    NumOut(0,LCD_LINE3,amount);
    }
x2 =Sensor(S1);
}

while (((20 * twenties) + (50 * fifties) + (100 * hundreds)) < amount) {
if (amount==0) {
	TextOut(0,LCD_LINE2,"Sorry, out of funds");
	Wait(1000);
	break;
} else {
	amount-=10;
	TextOut(0,LCD_LINE2,"Adjusted to");
	NumOut(0,LCD_LINE3,amount);
}

}

}

void readPin(int &pinno) {
int x = 0;
int y = 5;
int i = 0;
string Stelle1,Stelle2,Stelle3,Stelle4;
string Pincode;
int Pin[4];

SetSensorMode(1, IN_MODE_RAW);
SetSensorType(1, IN_TYPE_SWITCH);
ClearScreen();
TextOut(1, LCD_LINE1, "Bitte Pin eingeben");

until ((Sensor(S1) < 24 && Sensor(S1) > 19) || (Sensor(S1) < 35 && Sensor(S1) > 29)) {
x = Sensor(S1);
if (x > 6 && x < 11) {
      PlayTone(200,200);
      Pin[i] = 1;
      Wait(300);
	i++;
   } else if (x > 12  && x < 16) {
      PlayTone(200,200);
      Pin[i] = 2;
	Wait(300);
	i++;
   } else if(x > 15 && x < 19) {
      PlayTone(200,200);
      Pin[i] = 3;
      Wait(300);
	i++;
   } else if (x > 50 && x < 56) {
      PlayTone(200,200);
      Pin[i] = 4;
      Wait(300);
	i++;
   }
}
x = Sensor(S1);

if (x > 30 && x < 35) {
   ClearScreen();
   Stelle1 = NumToStr(Pin[0]);
   Stelle2 = NumToStr(Pin[1]);
   Stelle3 = NumToStr(Pin[2]);
   Stelle4 = NumToStr(Pin[3]);
   Pincode = StrCat(Stelle1,Stelle2,Stelle3,Stelle4);
   pinno=StrToNum(Pincode);
   TextOut(0,LCD_LINE2,"Read success");
   // NumOut(0,LCD_LINE3,pinno);
   Wait(2000);
} 


}

task main() {
SetBrickDataName("Bankomat");
while (true) {
ClearScreen();
//insert graphic
waiting(cardno);
readPin(pinno);
selectAmount(amount);

string nresponse=requestFunds(cardno,pinno,amount);
if (nresponse=="ack") {
    distribute(amount,twenties,fifties,hundreds);
    } else if (nresponse=="pin") {
    TextOut(0,LCD_LINE2,"Sorry, wrong pin number.");
    } else if (nresponse=="card") {
    TextOut(0,LCD_LINE2,"Sorry, account number not found.");
    } else if (nresponse=="funds") {
    TextOut(0,LCD_LINE2,"Sorry, insufficient funds.");
    }

}
}


