/*
Watch out for buffer overflows!!!
Optional: currencies, i18n 
*/

#define ACCOUNTS_FILENAME "konten.txt"
#define CURRENCY="sFr"

byte pressedButton;
int selectButton;      
int arraycount=5;      

struct account {
int accountno;
int pinno;
string lastname;
string firstname;
string title;
int amount;
bool active;
//int dailyout;
};

//initiated list of accounts, start at 0
account accountlist[64]; 


// === Functions & Operations ===

// taken from NXTmenu.nxc
//is it necessary to pass by reference here?
void waitButton() {                
byte wbIndex=BTNRIGHT;
while (wbIndex <= BTNCENTER)   {                         
	if (ButtonPressed(wbIndex,false) != 0)
      		break;                                
        	wbIndex++;                            
	if (wbIndex > BTNCENTER)              
		    wbIndex = BTNRIGHT;                   
}                                     
until(!ButtonPressed(wbIndex,FALSE));   
pressedButton = wbIndex;                
} 




void createAccount() {
arraycount++;
account pending;
int trypin=1234;
/* really fucking ugly
while (	trypin[0]==0 || 
	trypin[0]==5 ||
	trypin[0]==6 ||
	trypin[0]==7 ||
	trypin[0]==8 ||
	trypin[0]==9 ||
	trypin[1]==0 || 
	trypin[1]==5 ||
	trypin[1]==6 ||
	trypin[1]==7 ||
	trypin[1]==8 ||
	trypin[1]==9 ||
	trypin[2]==0 || 
	trypin[2]==5 ||
	trypin[2]==6 ||
	trypin[2]==7 ||
	trypin[2]==8 ||
	trypin[2]==9 ||
	trypin[3]==0 || 
	trypin[3]==5 ||
	trypin[3]==6 ||
	trypin[3]==7 ||
	trypin[3]==8 ||
	trypin[3]==9 ||
	trypin[4]==0 || 
	trypin[4]==5 ||
	trypin[4]==6 ||
	trypin[4]==7 ||
	trypin[4]==8 ||
	trypin[4]==9  ) { 
	trypin=Random(9999); 
	}
*/
pending.pinno = trypin;
TextOut(0,LCD_LINE1,"Pin number:");
NumOut(0,LCD_LINE2,pending.pinno);
accountlist[arraycount]=pending;
}

void closeAccount(int accountno) {
account closeme=accountlist[accountno];
if (closeme.amount>0) {
	TextOut(0,LCD_LINE1,"Still money in account");
	TextOut(0,LCD_LINE2,"Withdraw it first");
} else {
	closeme.active=FALSE;
	//needed to pass?
	accountlist[accountno]=closeme;
}


}

void additionalFunds(int accountno) {
//does not check what is still given
account addfunds;
int amount=100;
if (pressedButton==BTNLEFT) {
amount+=100;
TextOut(0,LCD_LINE1,"Add funds:");
NumOut(0,LCD_LINE2,amount); //hier W채hrung anh채ngen, wie?
}
if (pressedButton==BTNRIGHT) {
amount -=100;
TextOut(0,LCD_LINE1,"Add funds:");
NumOut(0,LCD_LINE2,amount); //hier W채hrung anh채ngen, wie?
}
if (pressedButton==BTNCENTER) {
//hier muss es das account value field sein statt account
addfunds.amount+=amount;
// besser return codes
//return 0;
accountlist[accountno]=addfunds;
}

}

void getAccountNo(int &accountno) {
//remove later
accountno=3;
while (true) {
	waitButton();
	if (pressedButton==BTNLEFT) {
		accountno--;
		TextOut(0,LCD_LINE1,"Account number:");
		NumOut(0,LCD_LINE2,accountno);
	}
	
	if (pressedButton==BTNRIGHT) {
		accountno++;
		TextOut(0,LCD_LINE1,"Account number:");
		NumOut(0,LCD_LINE2,accountno);
	}
	
	if (pressedButton==BTNCENTER) {
		break; 
		//reicht ein break?
	}
}
}

// === Network Communication ===

task networkListener() {
//ReceiveRemoteString(queue,true, constring);
account request;
//somehow get account,pin,amount from listener by extracting on X
//for now static
int accountno, pinno, amount;
/* if (pinno == request.pinno && amount < request.amount ) {
	SendResponseBool(queue,true);
	//wird das array aktualisiert?
	request.amount-=amount;
} else {
	SendResponseBool(queue,false);
}
*/

}

// === Mechanical Operations ===

//*insert vaporware here*

// === File I/O ===
//copied from NXC Guide & modified

void startfile() {
//open file to read
FileOpenType foArgs;
foArgs.Filename = ACCOUNTS_FILENAME;
SysFileOpenRead(foArgs); // open the file for reading
if (foArgs.Result == NO_ERR) {
// read data from the file using FileHandle
}

for (i in buffer) {
account tempaccount;
tempaccount.pin //etc, irate through byte
accountlist[i]=tempaccount;

}

}

void shutdownfile() {
//missing
FileOpenType foArgs;
foArgs.Filename = ACCOUNTS_FILENAME;
foArgs.Length = 256; // create with capacity for 256 bytes
SysFileOpenWrite(foArgs); // create the file
if (foArgs.Result == NO_ERR) {
	TextOut(0,LCD_LINE1,"Saved data, close program");
}
}

// === UI ===
task menu() {
/*
Left-Right-Select

Update balance
New Account
Close account

string option[];
new array option[]="Update Balance";
new array option[]="Create account";
new array option[]="Close account"; 

for (option as item) {
Textout(0,LCD_LINE0,item);
waitButton();
switch (a)
case 1: array++
	break;
case 2: array--
	break;
case 3: if (item="Update Balance") {
	int account=0;
	getAccountNo(account);
	additionalFunds(account);
	} else if (item="Close account") {
	int account=0;
	getAccountNo(account);
	closeAccount(account);
	} else if (item="Create account") {
	createAccount();
	}
	break;
*/
}
// ===Main===

task main() {
SetBrickDataName("Mainframe");

account testperson=accountlist[0];
testperson.accountno=25;
testperson.amount=1000;
testperson.pinno=1212;
testperson.lastname="Egli";

//instantiate bank accounts (from file)
//endless loop
	//start 3 listener for bluetooth connection AND keyboardlistener
	// table locking equivalent?
}
