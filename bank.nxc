#define ACCOUNTS_FILENAME "konten3.txt"
#define CLEARLINE(L) TextOut(0,L,"             ");
byte pressedButton;
int selectButton;
int arraycount=5;

struct account {
int accountno;
int pinno;
string lastname;
string firstname;
string title;
int amount;
bool inactive;
int wrongpin;
};

account accountlist[32];
bool finish=FALSE;

// === Functions & Operations ===

// taken from NXTmenu.nxc
//is it necessary to pass by reference here?
void waitButton() {
byte wbIndex=BTNRIGHT;
while (wbIndex <= BTNCENTER)   {
    if (ButtonPressed(wbIndex,false) != 0)
            break;
            wbIndex++;
    if (wbIndex > BTNCENTER)
            wbIndex = BTNRIGHT;
}
until(!ButtonPressed(wbIndex,FALSE));
pressedButton = wbIndex;
}

int getAccountNo() {
bool accstate=TRUE;
int accountno=3;

while (accstate) {
    TextOut(0,LCD_LINE1,"Account number:");
    NumOut(0,LCD_LINE2,accountno);
    waitButton();
    switch (pressedButton) {
        case BTNLEFT:
            accountno--;
            break;
        case BTNRIGHT:
            accountno++;
            break;
        case BTNCENTER:
            accstate=FALSE;
            break;
    }
}

return accountno;

}


string limitnumber() {
int check=Random(9);
while (check < 1 || check > 4) {
    check=Random(9);
}
return NumToStr(check);
}

void createAccount() {
int accountno=getAccountNo();
account pending;
string a=limitnumber();
string b=limitnumber();
string c=limitnumber();
string d=limitnumber();

string trypin=a+b+c+d;
pending.pinno = StrToNum(trypin);
TextOut(0,LCD_LINE1,"Pin number:");
NumOut(0,LCD_LINE2,pending.pinno);
accountlist[accountno]=pending;
Wait(3000);
}

void closeAccount() {
int accountno=getAccountNo();
account closeme=accountlist[accountno];
int temp=closeme.amount;
if (temp > 0) {
    ClearScreen();
    TextOut(0,LCD_LINE1,"Still money in account");
    TextOut(0,LCD_LINE2,"Withdraw it first");
    NumOut(0,LCD_LINE3,closeme.amount);
    Wait(3000);
} else {
    closeme.inactive=TRUE;
    accountlist[accountno]=closeme;
    TextOut(0,LCD_LINE2,"Set inactive");
    Wait(3000);
}

}

void additionalFunds() {
int accountno=getAccountNo();
//does not check what is still given
account addfunds=accountlist[accountno];
int amount=100;
bool addstate=TRUE;
while (addstate) {
    ClearScreen();
    TextOut(0,LCD_LINE1,"Add funds:");
    NumOut(0,LCD_LINE2,amount);
    waitButton();
    switch (pressedButton) {
        case BTNRIGHT:
        amount+=100;
        break;

        case BTNLEFT:
        amount -=100;
        break;

        case BTNCENTER:
        ClearScreen();
        if (addfunds.inactive==FALSE) {
            addfunds.amount+=amount;
            accountlist[accountno]=addfunds;
            TextOut(0,LCD_LINE1,"Updated, balance:");
            NumOut(0,LCD_LINE2,addfunds.amount);
            Wait(2000);
        } else {
            TextOut(0,LCD_LINE1,"Sorry, inactive account");
            Wait(2000);
        }
        addstate=FALSE;
        break;
    }
}

}



// === Network Communication ===

task networkListener() {

while(true) {
    int connection;
    string tc,tp,ta,requesta,requestb,requestc,request;

    until ((ReceiveRemoteString(1,true,requesta) == NO_ERR) ||
        (ReceiveRemoteString(2,true,requestb) == NO_ERR) ||
        (ReceiveRemoteString(3,true,requestc) == NO_ERR));

    if (StrLen(requesta) > 10) {
        request=requesta;
        connection=1;
    } else if (StrLen(requestb) > 10) {
        request=requestb;
        connection=2;
    } else {
        request=requestc;
        connection=3;
    }

    tc=SubStr(request,0,2);
    int scard=StrToNum(tc);
    if (scard!=0) {
        ClearScreen();
        TextOut(0,LCD_LINE2,"Konto:");
        NumOut(50,LCD_LINE2,scard);
        tp=SubStr(request,3,4);
        int spin=StrToNum(tp);
        TextOut(0,LCD_LINE3,"Pin:");
        NumOut(50,LCD_LINE3,spin);
        ta=SubStr(request,9,4);
        int samount=StrToNum(ta);
        TextOut(0,LCD_LINE4,"Amt:");
        NumOut(50,LCD_LINE4,samount);

        account person;
        person=accountlist[scard];
        TextOut(0,LCD_LINE5,"DB P:");
        NumOut(50,LCD_LINE5,person.pinno);
        TextOut(0,LCD_LINE6,"DB A:");
        NumOut(50,LCD_LINE6,person.amount);

        if (spin == person.pinno) {
            if (person.inactive==FALSE) {
                PlayTone(200,100);
                Wait(200);
                if (samount <= person.amount) {
                    PlayTone(300,100);
                    person.amount-=samount;
                    TextOut(50,LCD_LINE6,"     ");
                    NumOut(50,LCD_LINE6,person.amount);
                    SendRemoteString(connection,7,"ack");
                    accountlist[scard]=person;
                } else {
                    PlayTone(100,50);
                    SendRemoteString(connection,7,"funds");
                    TextOut(0,LCD_LINE6,"funds");
                    Wait(1000);
                }
            } else {
                PlayTone(100,50);
                SendRemoteString(connection,7,"inactive");
                TextOut(0,LCD_LINE6,"inactive");
                Wait(1000);
            }
        } else {
            person.wrongpin++;
            accountlist[scard]=person;
            if (person.wrongpin>=3) {
                PlayTone(100,50);
                SendRemoteString(connection,7,"kill");
                TextOut(0,LCD_LINE6,"kill");
                Wait(1000);
            } else {
                PlayTone(100,50);
                SendRemoteString(connection,7,"pin");
                TextOut(0,LCD_LINE6,"pin");
                Wait(1000);
            }

        }
    Wait(1000);
    }

    requesta="a";
    requestb="a";
    requestc="a";
    request="a";

}

}

// === File I/O ===
// based on NXC Guide & modified

void startfile() {

byte handle;
int fsize,accheck;
bool eof = false;
string buf,a;

if (OpenFileRead(ACCOUNTS_FILENAME,fsize,handle) == NO_ERR) {
//from NXC Tutorial
    until (eof == TRUE) {
        account readperson;
        ReadLnString(handle,a);
        readperson.accountno=StrToNum(a);
        ReadLnString(handle,a);
        readperson.pinno=StrToNum(a);
        ReadLnString(handle,readperson.lastname);
        ReadLnString(handle,readperson.firstname);
        ReadLnString(handle,readperson.title);
        ReadLnString(handle,a);
        readperson.amount=StrToNum(a);
        ReadLnString(handle,a);
        readperson.inactive=StrToNum(a);
        ReadLnString(handle,a);
        readperson.wrongpin=StrToNum(a);

        if(ReadLnString(handle,buf) != NO_ERR) eof = true;
        TextOut(0,LCD_LINE1,"Load:");
        accheck=readperson.accountno;
        if (accheck != 0) {
        NumOut(30,LCD_LINE1,accheck);
        NumOut(50,LCD_LINE1,readperson.amount);
        accountlist[readperson.accountno]=readperson;
        Wait(500);
        CLEARLINE(1);
        NumOut(50,LCD_LINE1,readperson.amount);
        Wait(500);
        }
    }
if (CloseFile(handle) != NO_ERR);
TextOut(0,LCD_LINE1,"Loose handle!");

} else {
    TextOut(0,LCD_LINE1,"Cannot open file");
}
Wait(2000);
}

void shutdownfile() {

byte handle;
int bwritten;
string a;
int w,x,y,z;
if (DeleteFile(ACCOUNTS_FILENAME) != NO_ERR) {
TextOut(0,LCD_LINE6,"Not deleted");
Wait(1000);
}
if (CreateFile(ACCOUNTS_FILENAME,256,handle) == NO_ERR) {
//wieso hier kleiner 31 nicht 32?
    for (int i=0;i<31;i++) {
        account writeperson=accountlist[i];
        x=writeperson.pinno;
        if (x != 0) {
            a=NumToStr(writeperson.accountno);
            WriteLnString(handle,a,bwritten);
            a=NumToStr(writeperson.pinno);
            WriteLnString(handle,a,bwritten);
            WriteLnString(handle,writeperson.lastname,bwritten);
            WriteLnString(handle,writeperson.firstname,bwritten);
            WriteLnString(handle,writeperson.title,bwritten);
            a=NumToStr(writeperson.amount);
            WriteLnString(handle,a,bwritten);
            a=NumToStr(writeperson.inactive);
            WriteLnString(handle,a,bwritten);
            a=NumToStr(writeperson.wrongpin);
            WriteLnString(handle,a,bwritten);
            ClearScreen();
            WriteLnString(handle,"spacer",bwritten);
            TextOut(0,LCD_LINE1,"Saving:");
            NumOut(40,LCD_LINE1,writeperson.accountno);
            NumOut(0,LCD_LINE2,writeperson.pinno);
            NumOut(0,LCD_LINE3,writeperson.amount);
            NumOut(0,LCD_LINE4,writeperson.wrongpin);
            Wait(1000);
        }
        x=0;
    }
    TextOut(0,LCD_LINE1,"Saved data");
    if (CloseFile(handle) == NO_ERR) {
    }
    else {
    TextOut(0,LCD_LINE2,"Loose handle!");
    PlayTone(500,100);
    }
} else {
    TextOut(0,LCD_LINE1,"Cannot open file");
    PlayTone(500,100);
}

TextOut(0,LCD_LINE4,"DONE");
Wait(1000);
}

// === UI ===

void menu() {

bool mstate=TRUE;
int i=0;
int accountno=0;

while (mstate) {
    if (i > 3) i=0;
    if (i < 0) i=3;
    if (i==0) {
        ClearScreen();
        Textout(0,LCD_LINE1,"Update Balance");
    } else if (i==1) {
        ClearScreen();
        Textout(0,LCD_LINE1,"Create account");
    } else if (i==2) {
        ClearScreen();
        Textout(0,LCD_LINE1,"Close account");
    } else if (i==3) {
        ClearScreen();
        Textout(0,LCD_LINE1,"Shutdown");
    }

    waitButton();
    switch (pressedButton) {
    case BTNRIGHT: i++;
        break;
    case BTNLEFT: i--;
        break;
    case BTNCENTER:
        if (i==0) {
            additionalFunds();
        } else if (i==2) {
            closeAccount();
        } else if (i==1) {
            createAccount();
        } else if (i==3) {
            mstate=false;
            shutdownfile();
        }
        break;
    }
}

}

// ===Main===

task main() {
SetBrickDataName("HEMITO");
startfile();

/* remove later these accounts

account testpersonb;
testpersonb.accountno=4;
testpersonb.amount=0;
testpersonb.pinno=1234;
testpersonb.inactive=FALSE;
testpersonb.lastname="Egli";
accountlist[4]=testpersonb;

account testperson;
testperson.accountno=3;
testperson.amount=300;
testperson.pinno=1234;
testperson.inactive=FALSE;
testperson.lastname="Egli";
accountlist[3]=testperson;
*/

start networkListener;
menu();
StopAllTasks();

}
